/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/datasets/": {
    get: operations["get_datasets_api_v1_datasets__get"];
  };
  "/api/v1/datasets/{dataset_name}": {
    get: operations["get_dataset_by_name_api_v1_datasets__dataset_name__get"];
  };
  "/health": {
    get: operations["api_status_health_get"];
  };
}

export interface components {
  schemas: {
    /**
     * ArrayContainerFormat
     * @description
     *     Supported chunked array container formats
     *
     * @enum {string}
     */
    ArrayContainerFormat: "n5" | "zarr" | "precomputed";
    /**
     * ContentType
     * @description
     *     Semantic classes for image data
     *
     * @enum {string}
     */
    ContentType: "em" | "lm" | "prediction" | "segmentation" | "analysis";
    /**
     * ContrastLimits
     * @description Specifies the range of values to use when displaying an image.
     * The "start" and "end" properties determine the values that should be
     * mapped to the lowest and highest intensities in a given lookup table.
     *
     * The "min" and "max" values determine the lowest and highest possible
     * values in the image histogram. These values are useful to setting up
     * the range of a histogram adjustment display to include a sensible range
     * of values.
     */
    ContrastLimits: {
      /** Start */
      start: number;
      /** End */
      end: number;
      /** Min */
      min: number;
      /** Max */
      max: number;
    };
    /** Dataset */
    Dataset: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Institutions */
      institutions: string[];
      softwareAvailability: components["schemas"]["SoftwareAvailability"];
      acquisition: components["schemas"]["FIBSEMAcquisition"];
      sample: components["schemas"]["Sample"];
      /** Publications */
      publications: components["schemas"]["Publication"][];
      /** Images */
      images: components["schemas"]["Image"][];
      /** Views */
      views: components["schemas"]["View"][];
      /**
       * Thumbnailurl
       * Format: uri
       */
      thumbnailUrl: string;
      /** Published */
      published: boolean;
    };
    /**
     * DisplaySettings
     * @description Metadata for display settings.
     */
    DisplaySettings: {
      contrastLimits: components["schemas"]["ContrastLimits"];
      /**
       * Color
       * Format: color
       */
      color?: string;
      /** Invertlut */
      invertLut: boolean;
    };
    /**
     * FIBSEMAcquisition
     * @description Metadata describing the FIB-SEM imaging process.
     */
    FIBSEMAcquisition: {
      /** Name */
      name: string;
      /** Institution */
      institution: string;
      /**
       * Startdate
       * Format: date
       */
      startDate?: string;
      gridSpacing: components["schemas"]["UnitfulVector"];
      dimensions: components["schemas"]["UnitfulVector"];
      /** Durationdays */
      durationDays?: number;
      /** Biasvoltage */
      biasVoltage?: number;
      /** Scanrate */
      scanRate?: number;
      /** Current */
      current?: number;
      /** Primaryenergy */
      primaryEnergy?: number;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * Image
     * @description A representation of some describable, accessible piece of
     * spatial data.
     */
    Image: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Url */
      url: string;
      format: components["schemas"]["ArrayContainerFormat"];
      transform: components["schemas"]["SpatialTransform"];
      sampleType: components["schemas"]["SampleType"];
      contentType: components["schemas"]["ContentType"];
      displaySettings: components["schemas"]["DisplaySettings"];
      /** Subsources */
      subsources: components["schemas"]["Mesh"][];
    };
    /**
     * Mesh
     * @description A mesh, parametrized by a format and a list of integer ids
     */
    Mesh: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Url */
      url: string;
      format: components["schemas"]["MeshFormat"];
      transform: components["schemas"]["SpatialTransform"];
      /** Ids */
      ids: number[];
    };
    /**
     * MeshFormat
     * @description
     *     Supported mesh formats
     *
     * @enum {string}
     */
    MeshFormat: "neuroglancer_legacy_mesh" | "neuroglancer_multilod_draco";
    /** Publication */
    Publication: {
      /** Name */
      name: string;
      type: components["schemas"]["PublicationType"];
      /**
       * Url
       * Format: uri
       */
      url: string;
    };
    /**
     * PublicationType
     * @description
     *     The types of publications supported -- DOI or paper.
     *
     * @enum {string}
     */
    PublicationType: "doi" | "paper";
    /**
     * Sample
     * @description Metadata describing the sample and sample preparation.
     */
    Sample: {
      /** Description */
      description: string;
      /** Protocol */
      protocol: string;
      /** Contributions */
      contributions: string;
      /** Organism */
      organism: string[];
      /** Type */
      type: string[];
      /** Subtype */
      subtype: string[];
      /** Treatment */
      treatment: string[];
    };
    /**
     * SampleType
     * @description
     *     Semantic classes for image samples.
     *     The class "scalar" contains samples that represent a quantity.
     *     The class "label" contains samples that represent a class or identity.
     *
     * @enum {string}
     */
    SampleType: "scalar" | "label";
    /**
     * SoftwareAvailability
     * @description An enumeration.
     * @enum {string}
     */
    SoftwareAvailability: "open" | "partially open" | "closed";
    /**
     * SpatialTransform
     * @description Representation of an N-dimensional scaling + translation transform for
     * labelled axes with units.
     */
    SpatialTransform: {
      /** Axes */
      axes: string[];
      /** Units */
      units: string[];
      /** Translate */
      translate: number[];
      /** Scale */
      scale: number[];
    };
    /** UnitfulVector */
    UnitfulVector: {
      /** Unit */
      unit: string;
      /** Values */
      values: { [key: string]: number };
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (Partial<string> & Partial<number>)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** View */
    View: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Sourcenames */
      sourceNames: string[];
      /** Position */
      position?: number[];
      /** Scale */
      scale?: number;
      /** Orientation */
      orientation?: number[];
    };
  };
}

export interface operations {
  get_datasets_api_v1_datasets__get: {
    parameters: {
      query: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Dataset"][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_dataset_by_name_api_v1_datasets__dataset_name__get: {
    parameters: {
      path: {
        dataset_name: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Dataset"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  api_status_health_get: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}

export interface external {}
