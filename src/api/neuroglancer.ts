/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Title = string;
export type Coordinates = string[];
export type Labels = string[];
export type Displaydimensions = string[];
export type Position = [number, number, number];
export type Crosssectionorientation = [number, number, number, number];
export type Crosssectionscale = number;
export type Crosssectiondepth = number;
export type Projectionscale = number;
export type Projectiondeth = number;
export type Projectionorientation = [number, number, number, number];
export type Showslices = boolean;
export type Showaxislines = boolean;
export type Showscalebar = boolean;
export type Showdefaultannotations = boolean;
export type Gpumemorylimit = number;
export type Systemmemorylimit = number;
export type Concurrentdownloads = number;
export type Prefetch = boolean;
export type Source = (string | LayerDataSource)[] | string | LayerDataSource;
export type Url = string;
export type Sourcerank = number;
export type Matrix = number[][];
export type Enabledefaultsubsources = boolean;
export type Name = string;
export type Visible = boolean;
export type Tab = string;
export type Type = "image";
export type Layerposition = number;
export type Flex = number;
export type Side = string;
export type Visible1 = boolean;
export type Size = number;
export type Row = number;
export type Col = number;
export type Tab1 = string;
export type Tabs = string[];
export type Panels = LayerSidePanelState[];
export type Pick = boolean;
/**
 * An enumeration.
 */
export type ToolNameEnum =
  | "annotatePoint"
  | "annotateLine"
  | "annotateBoundingBox"
  | "annotateSphere"
  | "blend"
  | "opacity"
  | "crossSectionRenderScale"
  | "selectedAlpha"
  | "notSelectedAlpha"
  | "objectAlpha"
  | "hideSegmentZero"
  | "baseSegmentColoring"
  | "ignoreNullVisibleSet"
  | "colorSeed"
  | "segmentDefaultColor"
  | "meshRenderScale"
  | "saturation"
  | "skeletonRendering.mode2d"
  | "skeletonRendering.lineWidth2d"
  | "skeletonRendering.lineWidth3d"
  | "shaderControl"
  | "mergeSegments"
  | "splitSegments"
  | "selectSegments";
export type Shader = string;
export type Shadercontrols =
  | number
  | string
  | InvlerpParameters
  | {
      [k: string]: number;
    };
export type Range = [number, number];
export type Window = [number, number];
export type Channel = number[];
export type Opacity = number;
export type Blend = string;
export type Crosssectionrenderscale = number;
export type Source1 = (string | LayerDataSource)[] | string | LayerDataSource;
export type Name1 = string;
export type Visible2 = boolean;
export type Tab2 = string;
export type Type1 = "segmentation";
export type Layerposition1 = number;
export type Panels1 = LayerSidePanelState[];
export type Pick1 = boolean;
export type Segments = string[];
export type Hidesegmentzero = boolean;
export type Selectedalpha = number;
export type Notselectedalpha = number;
export type Objectalpha = number;
export type Saturation = number;
export type Ignorenullvisibleset = boolean;
export type Shader1 = string;
export type Shadercontrols1 =
  | number
  | string
  | InvlerpParameters
  | {
      [k: string]: number;
    };
export type Mode2D = string;
export type Linewidth2D = number;
export type Mode3D = string;
export type Linewidth3D = number;
export type Colorseed = number;
export type Crosssectionrenderscale1 = number;
export type Meshrenderscale = number;
export type Meshsilhouetterendering = number;
export type Segmentquery = string;
export type Segmentdefaultcolor = string;
export type Linkedsegmentationgroup = string;
export type Linkedsegmentationcolorgroup = string | false;
export type Annotationcolor = string;
export type Source2 = (string | LayerDataSource)[] | string | LayerDataSource;
export type Name2 = string;
export type Visible3 = boolean;
export type Tab3 = string;
export type Type2 = "annotation";
export type Layerposition2 = number;
export type Panels2 = LayerSidePanelState[];
export type Pick2 = boolean;
export type Id = string;
export type Type3 = string;
export type Description = string;
export type Segments1 = number[];
export type Props = (number | string)[];
export type Point = number[];
export type Id1 = string;
export type Type4 = string;
export type Description1 = string;
export type Segments2 = number[];
export type Props1 = (number | string)[];
export type Pointa = number[];
export type Pointb = number[];
export type Id2 = string;
export type Type5 = string;
export type Description2 = string;
export type Segments3 = number[];
export type Props2 = (number | string)[];
export type Center = number[];
export type Radii = number[];
export type Annotations = (PointAnnotation | LineAnnotation | EllipsoidAnnotation)[];
export type Id3 = string;
export type Type6 = string;
export type Description3 = string;
export type Default = number | string;
export type EnumValues = (number | string)[];
export type EnumLabels = string[];
export type Annotationproperties = AnnotationPropertySpec[];
export type Annotationrelationships = string[];
export type Filterbysegmentation = string[];
export type Ignorenullsegmentfilter = boolean;
export type Shader2 = string;
export type Shadercontrols2 =
  | number
  | string
  | InvlerpParameters
  | {
      [k: string]: number;
    };
export type Source3 = (string | LayerDataSource)[] | string | LayerDataSource;
export type Name3 = string;
export type Visible4 = boolean;
export type Tab4 = string;
export type Type7 = "mesh";
export type Layerposition3 = number;
export type Panels3 = LayerSidePanelState[];
export type Pick3 = boolean;
export type Vertexattributesources = string[];
export type Shader3 = string;
export type Vertexattributenames = string[];
export type Source4 = (string | LayerDataSource)[] | string | LayerDataSource;
export type Name4 = string;
export type Visible5 = boolean;
export type Tab5 = string;
export type Type8 = "new";
export type Layerposition4 = number;
export type Panels4 = LayerSidePanelState[];
export type Pick4 = boolean;
export type Layers = (ImageLayer | SegmentationLayer | AnnotationLayer | MeshLayer | NewLayer)[];
export type Layout = string | LayerGroupViewer | DataPanelLayout;
export type Type9 = string;
export type Layers1 = string[];
export type Type10 = string;
export type Width = number;
export type Height = number;
export type Link = "linked" | "unlinked" | "relative";
export type Value = number[];
export type Link1 = "linked" | "unlinked" | "relative";
export type Value1 = [number, number, number, number];
export type Link2 = "linked" | "unlinked" | "relative";
export type Value2 = number;
export type Orthographicprojection = boolean;
export type Link3 = "linked" | "unlinked" | "relative";
export type Value3 = [number, number, number, number];
export type Crosssectionbackgroundcolor = string;
export type Projectionbackgroundcolor = string;
export type Flex1 = number;
export type Side1 = string;
export type Visible6 = boolean;
export type Size1 = number;
export type Row1 = number;
export type Col1 = number;
export type Layer = string;
export type Flex2 = number;
export type Side2 = string;
export type Visible7 = boolean;
export type Size2 = number;
export type Row2 = number;
export type Col2 = number;
export type Flex3 = number;
export type Side3 = string;
export type Visible8 = boolean;
export type Size3 = number;
export type Row3 = number;
export type Col3 = number;
export type Flex4 = number;
export type Side4 = string;
export type Visible9 = boolean;
export type Size4 = number;
export type Row4 = number;
export type Col4 = number;
export type Partialviewport = [number, number, number, number];

export interface ViewerState {
  title?: Title;
  dimensions?: Dimensions;
  relativeDisplayScales?: Relativedisplayscales;
  displayDimensions?: Displaydimensions;
  position?: Position;
  crossSectionOrientation?: Crosssectionorientation;
  crossSectionScale?: Crosssectionscale;
  crossSectionDepth?: Crosssectiondepth;
  projectionScale?: Projectionscale;
  projectionDeth?: Projectiondeth;
  projectionOrientation?: Projectionorientation;
  showSlices?: Showslices;
  showAxisLines?: Showaxislines;
  showScaleBar?: Showscalebar;
  showDefaultAnnotations?: Showdefaultannotations;
  gpuMemoryLimit?: Gpumemorylimit;
  systemMemoryLimit?: Systemmemorylimit;
  concurrentDownloads?: Concurrentdownloads;
  prefetch?: Prefetch;
  layers: Layers;
  layout: Layout;
  crossSectionBackgroundColor?: Crosssectionbackgroundcolor;
  projectionBackgroundColor?: Projectionbackgroundcolor;
  selectedLayer?: SelectedLayerState;
  statistics?: StatisticsDisplayState;
  helpPanel?: HelpPanelState;
  layerListPanel?: LayerListPanelState;
  partialViewport?: Partialviewport;
  selection?: Selection;
}
export interface Dimensions {
  [k: string]: [number, string] | [null, null, CoordinateArray];
}
export interface CoordinateArray {
  coordinates: Coordinates;
  labels: Labels;
}
export interface Relativedisplayscales {
  [k: string]: number;
}
export interface ImageLayer {
  source: Source;
  name: Name;
  visible?: Visible;
  tab?: Tab;
  type: Type;
  layerDimensions?: Layerdimensions;
  layerPosition?: Layerposition;
  panels?: Panels;
  pick?: Pick;
  tool_bindings?: ToolBindings;
  tool?: Tool;
  shader?: Shader;
  shaderControls?: Shadercontrols;
  opacity?: Opacity;
  blend?: Blend;
  crossSectionRenderScale?: Crosssectionrenderscale;
}
export interface LayerDataSource {
  url: Url;
  transform?: CoordinateSpaceTransform;
  subsources: Subsources;
  enableDefaultSubsources?: Enabledefaultsubsources;
}
export interface CoordinateSpaceTransform {
  outputDimensions: Outputdimensions;
  inputDimensions?: Inputdimensions;
  sourceRank?: Sourcerank;
  matrix: Matrix;
}
export interface Outputdimensions {
  [k: string]: [number, string] | [null, null, CoordinateArray];
}
export interface Inputdimensions {
  [k: string]: [number, string] | [null, null, CoordinateArray];
}
export interface Subsources {
  [k: string]: boolean;
}
export interface Layerdimensions {
  [k: string]: [number, string] | [null, null, CoordinateArray];
}
export interface LayerSidePanelState {
  flex?: Flex;
  side?: Side;
  visible?: Visible1;
  size?: Size;
  row?: Row;
  col?: Col;
  tab?: Tab1;
  tabs: Tabs;
}
export interface ToolBindings {
  [k: string]: Tool;
}
export interface Tool {
  type: ToolNameEnum;
}
export interface InvlerpParameters {
  range?: Range;
  window?: Window;
  channel?: Channel;
}
export interface SegmentationLayer {
  source: Source1;
  name: Name1;
  visible?: Visible2;
  tab?: Tab2;
  type: Type1;
  layerDimensions?: Layerdimensions1;
  layerPosition?: Layerposition1;
  panels?: Panels1;
  pick?: Pick1;
  tool_bindings?: ToolBindings1;
  tool?: Tool;
  segments?: Segments;
  equivalences?: Equivalences;
  hideSegmentZero?: Hidesegmentzero;
  selectedAlpha?: Selectedalpha;
  notSelectedAlpha?: Notselectedalpha;
  objectAlpha?: Objectalpha;
  saturation?: Saturation;
  ignoreNullVisibleSet?: Ignorenullvisibleset;
  skeletonRendering?: SkeletonRenderingOptions;
  colorSeed?: Colorseed;
  crossSectionRenderScale?: Crosssectionrenderscale1;
  meshRenderScale?: Meshrenderscale;
  meshSilhouetteRendering?: Meshsilhouetterendering;
  segmentQuery?: Segmentquery;
  segmentColors?: Segmentcolors;
  segmentDefaultColor?: Segmentdefaultcolor;
  linkedSegmentationGroup?: Linkedsegmentationgroup;
  linkedSegmentationColorGroup?: Linkedsegmentationcolorgroup;
}
export interface Layerdimensions1 {
  [k: string]: [number, string] | [null, null, CoordinateArray];
}
export interface ToolBindings1 {
  [k: string]: Tool;
}
export interface Equivalences {
  [k: string]: number;
}
export interface SkeletonRenderingOptions {
  shader: Shader1;
  shaderControls: Shadercontrols1;
  mode2d?: Mode2D;
  lineWidth2d?: Linewidth2D;
  mode3d?: Mode3D;
  lineWidth3d?: Linewidth3D;
}
export interface Segmentcolors {
  [k: string]: string;
}
export interface AnnotationLayer {
  annotationColor?: Annotationcolor;
  source: Source2;
  name: Name2;
  visible?: Visible3;
  tab?: Tab3;
  type: Type2;
  layerDimensions?: Layerdimensions2;
  layerPosition?: Layerposition2;
  panels?: Panels2;
  pick?: Pick2;
  tool_bindings?: ToolBindings2;
  tool?: Tool;
  annotations?: Annotations;
  annotationProperties?: Annotationproperties;
  annotationRelationships?: Annotationrelationships;
  linkedSegmentationLayer: Linkedsegmentationlayer;
  filterBySegmentation: Filterbysegmentation;
  ignoreNullSegmentFilter?: Ignorenullsegmentfilter;
  shader?: Shader2;
  shaderControls?: Shadercontrols2;
}
export interface Layerdimensions2 {
  [k: string]: [number, string] | [null, null, CoordinateArray];
}
export interface ToolBindings2 {
  [k: string]: Tool;
}
export interface PointAnnotation {
  id?: Id;
  type: Type3;
  description?: Description;
  segments?: Segments1;
  props: Props;
  point: Point;
}
export interface LineAnnotation {
  id?: Id1;
  type: Type4;
  description?: Description1;
  segments?: Segments2;
  props: Props1;
  pointA: Pointa;
  pointB: Pointb;
}
export interface EllipsoidAnnotation {
  id?: Id2;
  type: Type5;
  description?: Description2;
  segments?: Segments3;
  props: Props2;
  center: Center;
  radii: Radii;
}
export interface AnnotationPropertySpec {
  id: Id3;
  type: Type6;
  description?: Description3;
  default?: Default;
  enum_values?: EnumValues;
  enum_labels?: EnumLabels;
}
export interface Linkedsegmentationlayer {
  [k: string]: string;
}
export interface MeshLayer {
  source: Source3;
  name: Name3;
  visible?: Visible4;
  tab?: Tab4;
  type: Type7;
  layerDimensions?: Layerdimensions3;
  layerPosition?: Layerposition3;
  panels?: Panels3;
  pick?: Pick3;
  tool_bindings?: ToolBindings3;
  tool?: Tool;
  vertexAttributeSources?: Vertexattributesources;
  shader: Shader3;
  vertexAttributeNames?: Vertexattributenames;
}
export interface Layerdimensions3 {
  [k: string]: [number, string] | [null, null, CoordinateArray];
}
export interface ToolBindings3 {
  [k: string]: Tool;
}
export interface NewLayer {
  source: Source4;
  name: Name4;
  visible?: Visible5;
  tab?: Tab5;
  type: Type8;
  layerDimensions?: Layerdimensions4;
  layerPosition?: Layerposition4;
  panels?: Panels4;
  pick?: Pick4;
  tool_bindings?: ToolBindings4;
  tool?: Tool;
}
export interface Layerdimensions4 {
  [k: string]: [number, string] | [null, null, CoordinateArray];
}
export interface ToolBindings4 {
  [k: string]: Tool;
}
export interface LayerGroupViewer {
  type: Type9;
  layers: Layers1;
  layout: DataPanelLayout;
  position: LinkedListFloat;
  crossSectionOrientation: LinkedTupleFloatFloatFloatFloat;
  crossSectionScale: LinkedFloat;
  crossSectionDepth: LinkedFloat;
  projectionOrientation: LinkedTupleFloatFloatFloatFloat1;
  projectionScale: LinkedFloat;
  projectionDepth: LinkedFloat;
}
export interface DataPanelLayout {
  type: Type10;
  crossSections: Crosssections;
  orthographicProjection?: Orthographicprojection;
}
export interface Crosssections {
  [k: string]: CrossSection;
}
export interface CrossSection {
  width?: Width;
  height?: Height;
  position: LinkedListFloat;
  orientation: LinkedTupleFloatFloatFloatFloat;
  scale: LinkedFloat;
}
export interface LinkedListFloat {
  link?: Link;
  value?: Value;
  [k: string]: unknown;
}
export interface LinkedTupleFloatFloatFloatFloat {
  link?: Link1;
  value?: Value1;
  [k: string]: unknown;
}
export interface LinkedFloat {
  link?: Link2;
  value?: Value2;
  [k: string]: unknown;
}
export interface LinkedTupleFloatFloatFloatFloat1 {
  link?: Link3;
  value?: Value3;
  [k: string]: unknown;
}
export interface SelectedLayerState {
  flex?: Flex1;
  side?: Side1;
  visible?: Visible6;
  size?: Size1;
  row?: Row1;
  col?: Col1;
  layer?: Layer;
}
export interface StatisticsDisplayState {
  flex?: Flex2;
  side?: Side2;
  visible?: Visible7;
  size?: Size2;
  row?: Row2;
  col?: Col2;
}
export interface HelpPanelState {
  flex?: Flex3;
  side?: Side3;
  visible?: Visible8;
  size?: Size3;
  row?: Row3;
  col?: Col3;
}
export interface LayerListPanelState {
  flex?: Flex4;
  side?: Side4;
  visible?: Visible9;
  size?: Size4;
  row?: Row4;
  col?: Col4;
}
export interface Selection {
  [k: string]: number;
}
